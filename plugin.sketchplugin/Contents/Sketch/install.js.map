{"version":3,"sources":["webpack://exports/webpack/bootstrap","webpack://exports/./node_modules/@skpm/child_process/index.js","webpack://exports/./node_modules/@skpm/child_process/lib/execFileSync.js","webpack://exports/./node_modules/@skpm/child_process/lib/execSync.js","webpack://exports/./node_modules/@skpm/child_process/lib/handleData.js","webpack://exports/./node_modules/@skpm/child_process/lib/normalizeSpawnArguments.js","webpack://exports/./node_modules/@skpm/child_process/lib/spawnSync.js","webpack://exports/./src/install.js"],"names":["require","execSync","installPlugins","context","String","plugin","urlForResourceNamed","path","document","showMessage"],"mappings":";;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;ACjFA;AACA;AACA;;;;;;;;;;;;ACHA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,yDAAyD;AACzD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;AC7DA;;AAEA;AACA;AACA,4BAA4B;AAC5B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrBA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B;;AAE5B;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC5EA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iFAAiF,iBAAiB;AAClG;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;eC1DmB,mBAAAA,CAAQ,wEAAR,C;IAAbC,Q,YAAAA,Q;;AAEN,IAAIC,iBAAiB,SAAjBA,cAAiB,CAACC,OAAD,EAAa;AAChCF,WAASG,OAAOD,QAAQE,MAAR,CAAeC,mBAAf,CAAmC,kBAAnC,EAAuDC,IAAvD,EAAP,CAAT;AACD,CAFD;;AAIA,+DAAe,UAASJ,OAAT,EAAkB;AAC/BD,iBAAeC,OAAf;AACAA,UAAQK,QAAR,CAAiBC,WAAjB,CAA6B,8BAA7B;AACD,C","file":"install.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/install.js\");\n","\nmodule.exports.spawnSync = require('./lib/spawnSync')\nmodule.exports.execFileSync = require('./lib/execFileSync')\nmodule.exports.execSync = require('./lib/execSync')\n","var spawnSync = require('./spawnSync')\n\nfunction validateTimeout(timeout) {\n  if (timeout != null && !(Number.isInteger(timeout) && timeout >= 0)) {\n    throw new Error('ERR_OUT_OF_RANGE options.timeout');\n  }\n}\n\n\nfunction validateMaxBuffer(maxBuffer) {\n  if (maxBuffer != null && !(typeof maxBuffer === 'number' && maxBuffer >= 0)) {\n    throw new Error('ERR_OUT_OF_RANGE options.maxBuffer');\n  }\n}\n\nmodule.exports = function (file, args, options) {\n  var defaultOptions = {\n    encoding: 'utf8',\n    timeout: 0,\n    maxBuffer: 200 * 1024,\n    killSignal: 'SIGTERM',\n    cwd: null,\n    env: null,\n    shell: false\n  };\n\n  if (typeof args === 'object' && !Array.isArray(args)) {\n    // function (file, options, callback)\n    callback = options\n    options = Object.assign(defaultOptions, args)\n    args = []\n  } else {\n    // function (file, args, options, callback)\n    options = Object.assign(defaultOptions, options || {})\n  }\n\n  // Validate the timeout, if present.\n  validateTimeout(options.timeout);\n\n  // Validate maxBuffer, if present.\n  validateMaxBuffer(options.maxBuffer);\n\n  var child = spawnSync(file, args, {\n    cwd: options.cwd,\n    env: options.env,\n    gid: options.gid,\n    uid: options.uid,\n    shell: options.shell,\n    encoding: options.encoding\n  });\n\n  if (child.status !== 0) {\n    var error = new Error(\"Failed to run: \" + String(child.stderr))\n    error.pid = child.pid\n    error.status = child.status\n    error.stdout = child.stdout\n    error.stderr = child.stderr\n    throw error\n  }\n\n  return child.stdout;\n}\n","var execFileSync = require('./execFileSync')\n\nfunction normalizeExecArgs(command, options) {\n  // Make a shallow copy so we don't clobber the user's options object.\n  options = Object.assign({}, options);\n  options.shell = typeof options.shell === 'string' ? options.shell : true;\n\n  return {\n    file: command,\n    options: options\n  };\n}\n\nmodule.exports = function(command, options) {\n  var opts = normalizeExecArgs(command, options);\n  return execFileSync(opts.file, opts.options);\n};\n","module.exports = function handleData(data, encoding) {\n  switch (encoding) {\n    case 'utf8':\n      return String(NSString.alloc().initWithData_encoding(data, NSUTF8StringEncoding))\n    case 'ascii':\n      return String(NSString.alloc().initWithData_encoding(data, NSASCIIStringEncoding))\n    case 'utf16le':\n    case 'ucs2':\n      return String(NSString.alloc().initWithData_encoding(data, NSUTF16LittleEndianStringEncoding))\n    case 'base64':\n      var nsdataDecoded = NSData.alloc().initWithBase64EncodedData_options(data, 0)\n      return String(NSString.alloc().initWithData_encoding(nsdataDecoded, NSUTF8StringEncoding))\n    case 'latin1':\n    case 'binary':\n      return String(NSString.alloc().initWithData_encoding(data, NSISOLatin1StringEncoding))\n    case 'hex':\n      // TODO: how?\n      return data\n    default:\n      return data\n  }\n}\n","module.exports = function normalizeSpawnArguments(file, args, options) {\n  if (typeof file !== 'string' || file.length === 0)\n    throw new Error('ERR_INVALID_ARG_TYPE');\n\n  if (Array.isArray(args)) {\n    args = args.slice(0);\n  } else if (args !== undefined && (args === null || typeof args !== 'object')) {\n    throw new Error('ERR_INVALID_ARG_TYPE args');\n  } else {\n    options = args;\n    args = [];\n  }\n\n  if (options === undefined)\n    options = {};\n  else if (options === null || typeof options !== 'object')\n    throw new Error('ERR_INVALID_ARG_TYPE options');\n\n  // Validate the cwd, if present.\n  if (options.cwd != null && typeof options.cwd !== 'string') {\n    throw new Error('ERR_INVALID_ARG_TYPE options.cwd');\n  }\n\n  // Validate detached, if present.\n  if (options.detached != null && typeof options.detached !== 'boolean') {\n    throw new Error('ERR_INVALID_ARG_TYPE options.detached');\n  }\n\n  // Validate the uid, if present.\n  if (options.uid != null && !Number.isInteger(options.uid)) {\n    throw new Error('ERR_INVALID_ARG_TYPE options.uid');\n  }\n\n  // Validate the gid, if present.\n  if (options.gid != null && !Number.isInteger(options.gid)) {\n    throw new Error('ERR_INVALID_ARG_TYPE options.gid');\n  }\n\n  // Validate the shell, if present.\n  if (options.shell != null &&\n      typeof options.shell !== 'boolean' &&\n      typeof options.shell !== 'string') {\n    throw new Error('ERR_INVALID_ARG_TYPE options.shell');\n  }\n\n  // Validate argv0, if present.\n  if (options.argv0 != null && typeof options.argv0 !== 'string') {\n    throw new Error('ERR_INVALID_ARG_TYPE options.argv0');\n  }\n\n  // Make a shallow copy so we don't clobber the user's options object.\n  options = Object.assign({}, options);\n\n  if (options.shell) {\n    var command = [file].concat(args).join(' ');\n\n    if (typeof options.shell === 'string') {\n      file = options.shell;\n    } else {\n      file = '/bin/bash';\n    }\n    args = ['-l', '-c', command];\n  }\n\n  if (typeof options.argv0 === 'string') {\n    args.unshift(options.argv0);\n  }\n\n  var env = options.env;\n\n  return {\n    file: file,\n    args: args,\n    options: options,\n    envPairs: env\n  };\n}\n","/* globals NSPipe, NSTask, NSArray, NSHomeDirectory, NSFileHandleNotificationDataItem, NSUTF8StringEncoding, NSString, NSNotificationCenter, NSSelectorFromString, NSFileHandleReadCompletionNotification, NSDictionary, NSBundle */\nvar handleData = require('./handleData')\nvar normalizeSpawnArguments = require('./normalizeSpawnArguments')\n\nfunction spawnSync (_command, _args, _options) {\n  var opts = normalizeSpawnArguments(_command, _args, _options);\n\n  if (opts.file[0] !== '.' && opts.file[0] !== '/' && opts.file[0] !== '~') {\n    // means that someone refered to an executable that might be in the path, let's find it\n    var whichChild = spawnSync('/bin/bash', ['-l', '-c', 'which ' + opts.file], {encoding: 'utf8'})\n    if (whichChild.err) {\n      return whichChild\n    }\n    return spawnSync(whichChild.stdout.trim(), _args, _options)\n  } else {\n    var options = opts.options;\n\n    var pipe = NSPipe.pipe()\n    var errPipe = NSPipe.pipe()\n\n    try {\n      var task = NSTask.alloc().init()\n      task.setLaunchPath(NSString.stringWithString(opts.file).stringByExpandingTildeInPath())\n      task.arguments = NSArray.arrayWithArray(opts.args || [])\n      if (opts.envPairs) {\n        task.environment = opts.envPairs\n      }\n\n      if (options.cwd) {\n        task.setCurrentDirectoryPath(NSString.stringWithString(options.cwd).stringByExpandingTildeInPath())\n      }\n\n      task.setStandardOutput(pipe)\n      task.setStandardError(errPipe)\n\n      task.launch()\n      task.waitUntilExit()\n\n      return {\n        pid: String(task.processIdentifier()),\n        status: Number(task.terminationStatus()),\n        get stdout() {\n          var data = pipe.fileHandleForReading().readDataToEndOfFile()\n          return handleData(data, options.encoding)\n        },\n        get stderr() {\n          var data = errPipe.fileHandleForReading().readDataToEndOfFile()\n          return handleData(data, options.encoding)\n        },\n      }\n    } catch (err) {\n      return {\n        err: err,\n      }\n    }\n  }\n}\n\nmodule.exports = spawnSync\n","var { execSync } = require('@skpm/child_process');\n\nvar installPlugins = (context) => {\n  execSync(String(context.plugin.urlForResourceNamed('sketchPlugins.sh').path()));\n}\n\nexport default function(context) {\n  installPlugins(context);\n  context.document.showMessage(\"Sketch plugins installed! 🙌\");\n}\n"],"sourceRoot":""}